// 冒泡排序法
func sort(arr []int)[]int{
fmt.Println(arr)
	for i:=1;i<=len(arr)-1;i++{
		for j:=0;j<=len(arr)-1-i;j++{
		fmt.Printf("i= %v ,j= %v \n",i,j)
			var max int
			var min int
			if arr[j]>arr[j+1] {
				max = arr[j]
				min = arr[j+1]
			} else {
				max = arr[j+1]
				min = arr[j]
			}
			arr[j] = min
			arr[j+1] = max
			fmt.Printf("%+v\n",arr)
		}
	}
	return arr
}

// 顺序查找
func inArray(pattern int,arr []int)bool{
	for i:=0;i<len(arr);i++{
		if arr[i]==pattern {
			return true
		}
	
	}
	return false
}

// 二分查找
func find(pattern float64 ,arr []float64)(s float64){

	if len(arr)<=1 {
		if arr[0]==pattern {
			return arr[0]
		} else {
			return 0.0
		}
	}
	var middle int
	middle = (len(arr)-1)/2
	fmt.Printf("arr = %v,len= %v,middle= %v\n",arr,len(arr),middle)
	if pattern > arr[middle] {
		s = find(pattern,arr[middle+1:len(arr)])
	} else if pattern == arr[middle]{
		s = arr[middle]
	} else {
		s = find(pattern,arr[0:middle+1])
	}
	return s
}

